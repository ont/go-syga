package gosyga

import (
	"encoding/json"
	"fmt"
	"net/url"
)

//
// TODO: replace this file with swagger autogenerated code?
//

type AdminApi struct {
	bucket string
	url    string
}

type User struct {
	Name          string   `json:"name"`
	Password      string   `json:"password,omitempty"`
	AdminChannels []string `json:"admin_channels"`
	AllChannels   []string `json:"all_channels"`
	AdminRoles    []string `json:"admin_roles"`
	Email         string   `json:"email,omitempty"`
	Disabled      bool     `json:"disabled"`
}

type SessionRequest struct {
	UserName string `json:"name"`
	TTL      int    `json:"ttl"`
}

type SessionToken struct {
	CookieName string `json:"cookie_name"`
	Expires    string `json:"expires"`
	SessionId  string `json:"session_id"`
}

type SessionInfo struct {
	Valid bool `json:"ok"`
	User  struct {
		Username string         `json:"name"`
		Channels map[string]int `json:"channels"`
	} `json:"userCtx"`
}

func NewAdminApi(url string, bucket string) *AdminApi {
	return &AdminApi{
		bucket: bucket,
		url:    url,
	}
}

func (a *AdminApi) GetUser(uuid string) (*User, error) {
	url := a.url + "/" + url.QueryEscape(a.bucket) + "/_user/" + url.QueryEscape(uuid)

	resp, err := Do_GET(url)

	if err != nil {
		return nil, err
	}

	if resp.Code == 404 {
		return nil, nil // user doesn't exists in database
	}

	if resp.Code != 200 {
		return nil, fmt.Errorf("Can't get user, got non-200 response code: %d", resp.Code)
	}

	var user User
	err = json.Unmarshal(resp.Body, &user)

	if err != nil {
		return nil, err
	}

	return &user, nil
}

func (a *AdminApi) CreateUser(uuid string, password string) (*User, error) {
	url := a.url + "/" + url.QueryEscape(a.bucket) + "/_user/"
	fmt.Println("CreateUser:>", url)

	user := User{
		Name:     uuid,
		Password: password,
		Disabled: false,
	}

	data, err := json.Marshal(user)

	if err != nil {
		return nil, err
	}

	_, err = Do_POST(url, data)

	if err != nil {
		return nil, err
	}

	return a.GetUser(uuid)
}

func (a *AdminApi) CreateSession(username string) (*SessionToken, error) {
	url := a.url + "/" + url.QueryEscape(a.bucket) + "/_session"

	sessReq := SessionRequest{
		UserName: username,
		TTL:      24 * 3600, // 24 hours
	}

	data, err := json.Marshal(sessReq)
	if err != nil {
		return nil, err
	}

	resp, err := Do_POST(url, data)

	if err != nil {
		return nil, err
	}

	if resp.Code != 200 {
		return nil, fmt.Errorf("Can't create session, got non-200 response code: %d", resp.Code)
	}

	var token SessionToken
	err = json.Unmarshal(resp.Body, &token)

	if err != nil {
		return nil, err
	}

	return &token, nil
}

// Simple version of GET /{db}/{doc} call.
// Unmarshal any valid response into variable "v".
func (a *AdminApi) GetDoc(docId string, v interface{}) error {
	url := a.url + "/" + url.QueryEscape(a.bucket) + "/" + docId

	resp, err := Do_GET(url)
	if err != nil {
		return err
	}

	if resp.Code != 200 {
		return fmt.Errorf("Can't get document, got non-200 response code: %d", resp.Code)
	}

	err = json.Unmarshal(resp.Body, v)
	if err != nil {
		return err
	}

	return nil
}

func (a *AdminApi) GetSession(sessionId string) (*SessionInfo, error) {
	url := a.url + "/" + url.QueryEscape(a.bucket) + "/_session/" + sessionId

	resp, err := Do_GET(url)
	if err != nil {
		return nil, err
	}

	if resp.Code != 200 {
		return nil, fmt.Errorf("Can't get session %s, got non-200 response code: %d", sessionId, resp.Code)
	}

	var sessionInfo SessionInfo
	err = json.Unmarshal(resp.Body, &sessionInfo)

	return &sessionInfo, nil
}
